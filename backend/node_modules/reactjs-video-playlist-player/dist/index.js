function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);

function PlaylistQueue(_ref) {
  var videos = _ref.videos,
      currentVideo = _ref.currentVideo,
      changeCurrentVideo = _ref.changeCurrentVideo,
      defaultQueueItemPlaceholderThumbnail = _ref.defaultQueueItemPlaceholderThumbnail,
      vidRef = _ref.vidRef;

  var _useState = React.useState([]),
      queueList = _useState[0],
      setQueueList = _useState[1];

  React.useEffect(function () {
    var list = Array.from(Array(videos.length).keys());
    setQueueList(list);
  }, []);

  var changeCurrentVideoHandler = function changeCurrentVideoHandler(newItem) {
    vidRef.current.load();
    changeCurrentVideo(newItem);
  };

  return /*#__PURE__*/React__default.createElement("div", {
    className: "playlist-queue-styles"
  }, queueList.length > 0 && queueList.map(function (item) {
    return /*#__PURE__*/React__default.createElement("div", {
      key: item,
      className: currentVideo === item ? 'playlist-queue-item-styles current-playing-video-styles' : 'playlist-queue-item-styles',
      onClick: function onClick() {
        return changeCurrentVideoHandler(item);
      }
    }, /*#__PURE__*/React__default.createElement("img", {
      src: videos[item].thumbnail ? videos[item].thumbnail : defaultQueueItemPlaceholderThumbnail,
      alt: videos[item].imgAlt,
      className: "thumbnail-styles"
    }));
  }));
}

var goToNextVideo = function goToNextVideo(params) {
  if (params.playForward) {
    if (params.currentVideo + 1 >= params.videos.length) {
      params.setCurrentVideo(0);
    } else {
      params.setCurrentVideo(params.currentVideo + 1);
    }
  } else {
    if (params.currentVideo - 1 < 0) {
      params.setCurrentVideo(params.videos.length - 1);
    } else {
      params.setCurrentVideo(params.currentVideo - 1);
    }
  }
};

var goToPreviousVideo = function goToPreviousVideo(params) {
  if (params.playForward) {
    if (params.currentVideo - 1 < 0) {
      params.setCurrentVideo(params.videos.length - 1);
    } else {
      params.setCurrentVideo(params.currentVideo - 1);
    }
  } else {
    if (params.currentVideo + 1 >= params.videos.length) {
      params.setCurrentVideo(0);
    } else {
      params.setCurrentVideo(params.currentVideo + 1);
    }
  }
};

function Playlist(_ref) {
  var playlistParams = _ref.playlistParams;
  var videos = playlistParams.videos,
      autoPlay = playlistParams.autoPlay,
      showQueue = playlistParams.showQueue,
      playForward = playlistParams.playForward,
      defaultQueueItemPlaceholderThumbnail = playlistParams.defaultQueueItemPlaceholderThumbnail,
      currentVideo = playlistParams.currentVideo,
      setCurrentVideo = playlistParams.setCurrentVideo,
      vidRef = playlistParams.vidRef;
  React.useEffect(function () {
    setCurrentVideo(playForward ? 0 : videos.length - 1);
  }, []);
  React.useEffect(function () {
    if (videos.length > 0) {
      vidRef.current.onended = function () {
        if (autoPlay) {
          if (playForward) {
            if (currentVideo + 1 >= videos.length) {
              setCurrentVideo(0);
            } else {
              setCurrentVideo(currentVideo + 1);
            }
          } else {
            if (currentVideo - 1 < 0) {
              setCurrentVideo(videos.length - 1);
            } else {
              setCurrentVideo(currentVideo - 1);
            }
          }
        }
      };
    }
  }, [currentVideo]);
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, videos.length > 0 && /*#__PURE__*/React__default.createElement("div", {
    className: "video-container-styles"
  }, /*#__PURE__*/React__default.createElement("video", {
    className: "video-styles",
    autoPlay: autoPlay,
    muted: autoPlay ? true : false,
    ref: vidRef,
    src: videos[currentVideo].url,
    controls: true
  }), showQueue && /*#__PURE__*/React__default.createElement(PlaylistQueue, {
    vidRef: vidRef,
    videos: videos,
    currentVideo: currentVideo,
    changeCurrentVideo: setCurrentVideo,
    defaultQueueItemPlaceholderThumbnail: defaultQueueItemPlaceholderThumbnail
  })));
}

exports.Playlist = Playlist;
exports.goToNextVideo = goToNextVideo;
exports.goToPreviousVideo = goToPreviousVideo;
//# sourceMappingURL=index.js.map
